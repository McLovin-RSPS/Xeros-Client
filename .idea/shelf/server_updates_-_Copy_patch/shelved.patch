Index: src/main/java/net/runelite/api/NPC.java
===================================================================
diff --git a/src/main/java/net/runelite/api/NPC.java b/src/main/java/net/runelite/api/NPC.java
--- a/src/main/java/net/runelite/api/NPC.java	
+++ b/src/main/java/net/runelite/api/NPC.java	
@@ -63,6 +63,8 @@
 	public int maxHit;
 	public Direction walkDirection = Direction.NONE;
 	public Direction runDirection = Direction.NONE;
+
+	public Direction crawlDirection = Direction.NONE;
 	public int walkingType;
 
 	public int lastX, lastY;
@@ -104,6 +106,7 @@
 	private ForceMovement forceMovement;
 	public String forcedText;
 	public int FocusPointX = -1, FocusPointY = -1;
+	boolean instantFocusPoint = false;//TODO, not yet used by jagex
 	public int face;
 	public int totalAttacks;
 	private boolean facePlayer = true;
@@ -680,13 +683,19 @@
 		} else {
 			str.writeBits(1, 1);
 
+			str.writeBits(2, runDirection == Direction.NONE ? 1 : 2);
 			if (runDirection == Direction.NONE) {
-				str.writeBits(2, 1);
+				//str.writeBits(2, 1);
 				str.writeBits(3, walkDirection.toInteger());
 			} else {
-				str.writeBits(2, 2);
-				str.writeBits(3, walkDirection.toInteger());
-				str.writeBits(3, runDirection.toInteger());
+				//str.writeBits(2, 2);
+				str.writeBits(1, crawlDirection == Direction.NONE ? 1 : 0);
+				if(crawlDirection == Direction.NONE) {
+					str.writeBits(3, walkDirection.toInteger());
+					str.writeBits(3, runDirection.toInteger());
+				} else {
+					str.writeBits(3, crawlDirection.toInteger());
+				}
 			}
 
 			if (isUpdateRequired()) {
@@ -748,6 +757,7 @@
 	private void appendSetFocusDestination(Stream str) {
 		str.writeShortLE(FocusPointX);
 		str.writeShortLE(FocusPointY);
+		str.writeByte(instantFocusPoint ? 1 : 0);//instant facing
 	}
 
 	public void facePosition(Position position) {
Index: src/main/java/net/runelite/api/Player.java
===================================================================
diff --git a/src/main/java/net/runelite/api/Player.java b/src/main/java/net/runelite/api/Player.java
--- a/src/main/java/net/runelite/api/Player.java	
+++ b/src/main/java/net/runelite/api/Player.java	
@@ -290,8 +290,9 @@
     public int currentX;
     public int currentY;
     public int heightLevel;
-    public int dir1 = -1;
-    public int dir2 = -1;
+    public int walkDirection = -1;
+    public int runDirection = -1;
+    public int crawlDirection = -1;
     public int poimiX;
     public int poimiY;
     public int playerListSize;
@@ -455,6 +456,7 @@
     public boolean breakVials;
     public boolean collectCoins;
     private boolean runningToggled = true;
+    private boolean crawlToggled = false;
     // Trading post.
     public long lastTradingPostView;
     public boolean inSelecting;
@@ -3607,7 +3609,7 @@
     }
 
     public boolean isRunning() {
-        return isNewWalkCmdIsRunning() || dir2 > -1;
+        return isNewWalkCmdIsRunning() || runDirection > -1;
     }
 
     public void stopMovement() {
@@ -3694,7 +3696,7 @@
     public void getNextPlayerMovement() {
         mapRegionDidChange = false;
         didTeleport = false;
-        dir1 = dir2 = -1;
+        walkDirection = runDirection = -1;
         if (getTeleportToX() != -1 && getTeleportToY() != -1) {
             mapRegionDidChange = true;
             if (mapRegionX != -1 && mapRegionY != -1) {
@@ -3728,13 +3730,16 @@
                 resetWalkingQueue();
                 return;
             }
-            dir1 = getNextWalkingDirection();
-            if (dir1 == -1) {
+            walkDirection = getNextWalkingDirection();
+            if (walkDirection == -1) {
                 runningDistanceTravelled = 0;
                 return;
             }
+            if(isCrawlingToggled() && getMovementState().isCrawlingEnabled()) {
+                crawlDirection = getNextWalkingDirection();
+            }
             if (isRunningToggled() && getMovementState().isRunningEnabled()) {
-                dir2 = getNextWalkingDirection();
+                runDirection = getNextWalkingDirection();
                 runningDistanceTravelled++;
             } else {
                 runningDistanceTravelled = 0;
@@ -3826,7 +3831,7 @@
             str.writeBits(7, currentX);
             return;
         }
-        if (dir1 == -1) {
+        if (walkDirection == -1) {
             // don't have to update the character position, because we're just
             // standing
             str.createFrameVarSizeWord(81);
@@ -3843,17 +3848,22 @@
             str.createFrameVarSizeWord(81);
             str.initBitAccess();
             str.writeBits(1, 1);
-            if (dir2 == -1) {
+            if (runDirection == -1) {
                 isMoving = true;
                 str.writeBits(2, 1);
-                str.writeBits(3, Misc.xlateDirectionToClient[dir1]);
+                str.writeBits(3, Misc.xlateDirectionToClient[walkDirection]);
                 if (isUpdateRequired()) str.writeBits(1, 1);
                 else str.writeBits(1, 0);
             } else {
                 isMoving = true;
                 str.writeBits(2, 2);
-                str.writeBits(3, Misc.xlateDirectionToClient[dir1]);
-                str.writeBits(3, Misc.xlateDirectionToClient[dir2]);
+                str.writeBits(1, crawlDirection == -1 ? 1 : 0);
+                if(crawlDirection == -1) {
+                    str.writeBits(3, Misc.xlateDirectionToClient[walkDirection]);
+                    str.writeBits(3, Misc.xlateDirectionToClient[runDirection]);
+                } else {
+                    str.writeBits(3, Misc.xlateDirectionToClient[crawlDirection]);
+                }
                 if (isUpdateRequired()) str.writeBits(1, 1);
                 else str.writeBits(1, 0);
             }
@@ -3862,21 +3872,26 @@
 
     public void updatePlayerMovement(Stream str) {
         // synchronized(this) {
-        if (dir1 == -1) {
+        if (walkDirection == -1) {
             if (isUpdateRequired() || isChatTextUpdateRequired()) {
                 str.writeBits(1, 1);
                 str.writeBits(2, 0);
             } else str.writeBits(1, 0);
-        } else if (dir2 == -1) {
+        } else if (runDirection == -1 && crawlDirection == -1) {
             str.writeBits(1, 1);
             str.writeBits(2, 1);
-            str.writeBits(3, Misc.xlateDirectionToClient[dir1]);
+            str.writeBits(3, Misc.xlateDirectionToClient[walkDirection]);
             str.writeBits(1, (isUpdateRequired() || isChatTextUpdateRequired()) ? 1 : 0);
         } else {
             str.writeBits(1, 1);
             str.writeBits(2, 2);
-            str.writeBits(3, Misc.xlateDirectionToClient[dir1]);
-            str.writeBits(3, Misc.xlateDirectionToClient[dir2]);
+            str.writeBits(1, crawlDirection == -1 ? 1 : 0);
+            if(crawlDirection == -1) {
+                str.writeBits(3, Misc.xlateDirectionToClient[walkDirection]);
+                str.writeBits(3, Misc.xlateDirectionToClient[runDirection]);
+            } else {
+                str.writeBits(3, Misc.xlateDirectionToClient[crawlDirection]);
+            }
             str.writeBits(1, (isUpdateRequired() || isChatTextUpdateRequired()) ? 1 : 0);
         }
     }
@@ -5432,6 +5447,14 @@
         return runningToggled;
     }
 
+    public void setCrawlingToggled(boolean crawlingToggled) {
+        this.crawlToggled = crawlingToggled;
+    }
+
+    public boolean isCrawlingToggled() {
+        return crawlToggled;
+    }
+
     public RechargeItems getRechargeItems() {
         return rechargeItems;
     }
